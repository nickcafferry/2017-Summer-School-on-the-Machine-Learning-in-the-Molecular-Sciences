#!/usr/bin/perl
#PBS -e !ERRFILE!
#PBS -o !OUTFILE!
#PBS -l !WALLTIME!
#PBS -l !NODE!

use Cwd qw();
$envdir=Cwd::abs_path();
########### setup  the environment and Working DIRectory ###
#$ENV{'PATH'}="/usr/local/bin:/bin:/usr/bin:/usr/X11R6/bin:/usr/pgi/linux86/bin:/usr/pbs/bin";
#$ENV{'LD_LIBRARY_PATH'}="/usr/local/lib:/usr/lib:/lib";
#$ENV{'LD_LIBRARY_PATH'}="$envdir/shared_lib:$ENV{'LD_LIBRARY_PATH'}";

%ts=(
     'GLY'=>'G',
     'ALA'=>'A',
     'VAL'=>'V',
     'LEU'=>'L',
     'ILE'=>'I',
     'SER'=>'S',
     'THR'=>'T',
     'CYS'=>'C',
     'MET'=>'M',
     'PRO'=>'P',
     'ASP'=>'D',
     'ASN'=>'N',
     'GLU'=>'E',
     'GLN'=>'Q',
     'LYS'=>'K',
     'ARG'=>'R',
     'HIS'=>'H',
     'PHE'=>'F',
     'TYR'=>'Y',
     'TRP'=>'W',

     'ASX'=>'B',
     'GLX'=>'Z',
     'UNK'=>'X',
     'G'=>'GLY',
     'A'=>'ALA',
     'V'=>'VAL',
     'L'=>'LEU',
     'I'=>'ILE',
     'S'=>'SER',
     'T'=>'THR',
     'C'=>'CYS',
     'M'=>'MET',
     'P'=>'PRO',
     'D'=>'ASP',
     'N'=>'ASN',
     'E'=>'GLU',
     'Q'=>'GLN',
     'K'=>'LYS',
     'R'=>'ARG',
     'H'=>'HIS',
     'F'=>'PHE',
     'Y'=>'TYR',
     'W'=>'TRP',
    
     'a'=>'CYS',
     'b'=>'CYS',
     'c'=>'CYS',
     'd'=>'CYS',
     'e'=>'CYS',
     'f'=>'CYS',
     'g'=>'CYS',
     'h'=>'CYS',
     'i'=>'CYS',
     'j'=>'CYS',
     'k'=>'CYS',
     'l'=>'CYS',
     'm'=>'CYS',
     'n'=>'CYS',
     'o'=>'CYS',
     'p'=>'CYS',
     'q'=>'CYS',
     'r'=>'CYS',
     's'=>'CYS',
     't'=>'CYS',
     'u'=>'CYS',
     'v'=>'CYS',
     'w'=>'CYS',
     'x'=>'CYS',
     'y'=>'CYS',
     'z'=>'CYS',

     'B'=>'ASX',
     'Z'=>'GLX',
     'X'=>'CYS',
    );

##### report node -------->
`hostname`=~/(\S+)/;
$node=$1;
printf "hostname: $node\n";
$time1=time();
printf "starting time: $time1";
$pwd=`pwd`;
printf "pwd: $pwd";

$s="!S!";
$data_dir="!DATA_DIR!";  #for seq.txt and init.dat
$libdir="!BIN_DIR!/lib"; ##Changed from "/nfs/amino-library"; #/library/yzhang
$bindir="!BIN_DIR!/bin";# Changed from "/nfs/amino-home/zhng/pdbinput/contact/bin";
$svmscaledir="!BIN_DIR!/lib/bin/SVMSEQ/yzhang/bin"; ## Added
$summarydir="!BIN_DIR!/lib/bin/SVMSEQ/yzhang/summary"; ## Added

$tag="!TAG!";

#$work_dir="/tmp/!USER!/!TAG!";
$work_dir="/scratch/$ENV{USER}/$ENV{SLURM_JOBID}";
$work_dir="/tmp/$ENV{USER}" if (!-d "$work_dir" || ! "$ENV{SLURM_JOBID}");
$work_dir="$work_dir/$tag";

$tmp_dir="/tmp/!USER!/!TAG!/record";
`rm -fr $work_dir`;
`mkdir -p $work_dir`;
`mkdir -p $tmp_dir`;
chdir "$work_dir";

###################################
#make fasta
###################################
#make the fasta format of sequence
if(!-s "$data_dir/seq.txt"){ #if seq.txt does not exist
    printf "$s without input sequences, $data_dir/seq.txt!\n";
    exit();
}
`cp $data_dir/seq.txt seq.txt`;
open(fasta,">protein.fasta");
printf fasta "> $s\n";
open(seqtxt,"seq.txt");
$i=0;
$j=0;
$ID="your_protein";
while($line=<seqtxt>){
    if($line=~/^>\s*(\S.+)/){
	$ID=$1;
	goto pos1;
    }
    if($line=~/(\S+)/){
	$sequence=$1;
	$L=length $sequence;
	for($k=1;$k<=$L;$k++){
	    $i++;
	    $j++;
	    $a=substr($sequence,$k-1,1);
	    $seqQ3{$j}=$ts{$a};
	    printf fasta "$a";
	    if($i==60){
		printf fasta "\n";
		$i=0;
	    }
	}
    }
  pos1:;
}
if($i != 60){
    printf fasta "\n";
}
close(seqtxt);
close(fasta);

###############################################################
#make 'seq.dat'
###############################################################
print "making seq.dat\n";
#use psipred to predict secondary structure
`$libdir/bin/psipred24/runpsipred protein.fasta`;
########### make 'seq.dat' ########################

open(psipred,"protein.horiz");
open(yan,">seq.dat");
$j=0;
while($line=<psipred>){
    if($line=~/Conf:\s+(\d+)/){
	$conf=$1;
	<psipred>=~/Pred:\s+(\S+)/;
	$pred=$1;
	<psipred>=~/AA:\s+(\S+)/;
	$aa=$1;
	$num=length $aa;
	for($i=1;$i<=$num;$i++){
	    $j++;
	    $conf1=substr($conf,$i-1,1);
	    $pred1=substr($pred,$i-1,1);
	    $aa1=substr($aa,$i-1,1);
	    $sec{$j}=1;
	    $sec{$j}=2 if($conf1 >=1 && $pred1 eq 'H'); #confidence score >1
	    $sec{$j}=4 if($conf1 >=1 && $pred1 eq 'E'); #confidence score >1
	    printf yan "%5d %3s %5d %5d\n",$j,$seqQ3{$j},$sec{$j},$conf1;
	}
    }
}
close(yan);
close(psipred);

###############################################################
#make 'exp.dat'
###############################################################
print "making exp.dat\n";
`cp $bindir/exp_svmseq.pl ./`;
`./exp_svmseq.pl $libdir`; #generate exp.dat ## libdir added as arguement.!!! CHECK with Chengxin!!

###############################################################
#make '$s_pssm.txt'
###############################################################
print "making pssm\n";
if(-s "./protein.mat3" > 10){ 
    `cp ./protein.mat3 $s\_pssm.txt`; #generated by exp_svmseq.pl
    `cp ./protein.out blast.out`;
}else{
    `$libdir/blast/bin/blastpgp -b 1000 -j 3 -h 0.001 -d $libdir/nr/nr -i protein.fasta -Q $s\_pssm.txt > blast.out`;
}

####cp back to directory
`/bin/cp seq.dat       $tmp_dir/`;
`/bin/cp exp.dat       $tmp_dir/`;
`/bin/cp $s\_pssm.txt  $tmp_dir/`;
`/bin/cp protein.ss2   $tmp_dir/`;
`/bin/cp protein.ss2   $tmp_dir/seq.ss`;
###`/bin/cp blast.out     $tmp_dir/`;

### Numbers of features for short- medium- and long-ranges
@di=qw(       
       781
       787
       918
       );

### normalization constants
@par=qw(
	par0
	par1
	par2
	);

### svm training models
@model=qw(
	   modelCA0
	   modelCA1
	   modelCA2
	   );

###############################################################
#Do prediction
###############################################################
for($i=0;$i<3;$i++){
    # construct input file
    open(fl,">$tmp_dir/svmseq_$s\_$i.pbs");
    printf fl "#PBS -N subjob_$s\_$i\n";
    printf fl "#PBS -l nodes=1:ppn=1,walltime=24:00:00,mem=2400m\n";
    printf fl "#PBS -o $tmp_dir/svmseq_$s\_$i.out\n";
    printf fl "#PBS -e $tmp_dir/svmseq_$s\_$i.err\n";
    printf fl "hostname\n";
    
    printf fl "mkdir -p $tmp_dir/tmp$i\n";
    printf fl "cd $tmp_dir/tmp$i\n";
    printf fl "/bin/cp $tmp_dir/seq.dat $tmp_dir/tmp$i\n";
    printf fl "/bin/cp $tmp_dir/exp.dat $tmp_dir/tmp$i\n";
    printf fl "/bin/cp $tmp_dir/$s\_pssm.txt $tmp_dir/tmp$i\n";
    
    ##prepare files
    printf fl "cp $bindir/constructCA_input.pl $tmp_dir/tmp$i\n";
    printf fl "cp $libdir/bin/SVMSEQ/svm-scale $tmp_dir/tmp$i\n";
    printf fl "cp $libdir/bin/SVMSEQ/predictCA.pl $tmp_dir/tmp$i\n";
    printf fl "cp $libdir/bin/SVMSEQ/svm_classify $tmp_dir/tmp$i\n";
    #printf fl "/bin/cp $tmp_dir/blast.out $work_dir\_$i\n";
    
    printf fl "./constructCA_input.pl $i 7 $s $svmscaledir $summarydir\n";     ## Changed
    #predict contacts
    printf fl "./predictCA.pl $s $model[$i] CA $i $libdir $summarydir\n";   ## Changed
    printf fl "rm -rf scaled_inputCA$i\.dat*\n";
    printf fl "mv contact_modelCA$i $tmp_dir\n";  
    printf fl "rm -rf $tmp_dir/tmp$i\n";	
    close(fl);
    
    if($i <= 1){
	`chmod a+x $tmp_dir/svmseq_$s\_$i.pbs`;
	`$tmp_dir/svmseq_$s\_$i.pbs`;
    }else{
	`chmod a+x $tmp_dir/svmseq_$s\_$i.pbs`;
	`$tmp_dir/svmseq_$s\_$i.pbs`;
    }
}

YYY2:;
if( (-s "$tmp_dir/contact_modelCA0" > 0)  && (-s "$tmp_dir/contact_modelCA1" > 0) && (-s "$tmp_dir/contact_modelCA2" > 0)){
    printf "all files are finished\n";
    goto YYY3;
}else{
    sleep(30);
    goto YYY2;
}

YYY3:;
#####################################################
#####combine short medium and long range together####
#####################################################
$cut1=1.75;
$cut2=0.75;
$cut3=0.25;

#short range
open(fl,"$tmp_dir/contact_modelCA0") || die "cann't open $tmp_dir/contact_modelCA0\n";
<fl>=~/(\S+)/;
$len=$1;
$c=0;
for($i=0;$i<$len;$i++){
    <fl>=~/(\S+)\s+(\S+)\s+(\S+)/;
    $c++;
    $pair1{$c}=$1;
    $pair2{$c}=$2;
    $tmp=$3*2.0-1.0;
    if($tmp>=0.5){
	$score{$c}=$tmp*$cut1-$cut2;
    }else{
	$score{$c}=$tmp*$cut3+$cut3;
    }    
}
close(fl);

#medium range
open(fl,"$tmp_dir/contact_modelCA1") || die "cann't open $tmp_dir/contact_modelCA1\n";
<fl>=~/(\S+)/;
$len=$1;
for($i=0;$i<$len;$i++){
    <fl>=~/(\S+)\s+(\S+)\s+(\S+)/;
    $c++;
    $pair1{$c}=$1;
    $pair2{$c}=$2;
    $tmp=$3*2.0-1.0;
    if($tmp>=0.5){
	$score{$c}=$tmp*$cut1-$cut2;
    }else{
	$score{$c}=$tmp*$cut3+$cut3;
    }
}
close(fl);

#long range
open(fl,"$tmp_dir/contact_modelCA2") || die "cann't open $tmp_dir/contact_modelCA2\n";
<fl>=~/(\S+)/;
$len=$1;
for($i=0;$i<$len;$i++){
    <fl>=~/(\S+)\s+(\S+)\s+(\S+)/;
    $c++;
    $pair1{$c}=$1;
    $pair2{$c}=$2;
    $tmp=$3*2.0-1.0;
    if($tmp>=0.5){
	$score{$c}=$tmp*$cut1-$cut2;
    }else{
	$score{$c}=$tmp*$cut3+$cut3;
    }  
}
close(fl);

$counter=$c;

@score_keys=sort{$score{$b}<=>$score{$a}} keys %score;


print "counter=$counter, i=$i\n";
open(wfl,">svmseq.dat");
printf wfl "$counter\n";
for($i=1;$i<=$counter;$i++){   
    printf wfl "%4d %4d %5.3f\n",$pair1{$score_keys[$i-1]},$pair2{$score_keys[$i-1]},$score{$score_keys[$i-1]};   
}
close(wfl);

######### for casp format -------->
#`$libdir/bin/SVMSEQ/convert.pl .`;
#`cp prediction.txt $tmp_dir/SVMSEQ$s.map`;
#`rm $tmp_dir/contact_modelCA?`;
####################################

`cp svmseq.dat $data_dir/svmseq.dat`;
`cp svmseq.dat $data_dir/svmseq.NNB`;

############### convert contact into QUARK format ------->
#$a1="$work_dir/svmseq.dat";
#$a2="$data_dir/seq100.com.ss";
#$a2="$data_dir/seq.dat.ss" if(!-s "$a2");
#$a3="$data_dir/exp100.dat";
#$a3="$data_dir/exp.dat" if(!-s "$a3");
#$a4="$work_dir/svmseq.dat.quark";
#$bind="/nfs/amino-home/zhng/pdbinput/contact/bin";
#system("$bind/contact_quark.pl $a1 $a2 $a3 $a4");
#`cp $work_dir/svmseq.dat.quark $data_dir/svmseq.dat.quark`;
#^^^^^^^^^^^^ contact.quark completed ^^^^^^^^^^^^^^^^^^^


################# endding procedure ######################
$time2=time();
printf "ending time: $time2";
printf "total time =%8.2f\n".($time2-$time1)/3600.0;
`sync`;
`sync`;
sleep(1);
`rm -fr $work_dir`;

exit();
