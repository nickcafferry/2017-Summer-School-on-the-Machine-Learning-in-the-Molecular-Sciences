#!/usr/bin/perl
#PBS -e !ERRFILE!
#PBS -o !OUTFILE!
#PBS -l !WALLTIME!
#PBS -l !NODE!
#PBS -l ddisk=40000

use Math::Trig;

use Cwd qw();
$envdir =Cwd::abs_path();

########### setup  the environment and Working DIRectory ###
#$ENV{'PATH'}="/usr/local/bin:/bin:/usr/bin:/usr/X11R6/bin:/usr/pgi/linux86/bin";
#$ENV{'LD_LIBRARY_PATH'}="/usr/local/lib:/usr/lib:/lib";
#$ENV{'LD_LIBRARY_PATH'}="$envdir/shared_lib:$ENV{'LD_LIBRARY_PATH'}";

##### report node --------> ## Do we need this?
`hostname`=~/(\S+)/;
$node=$1;
printf "hostname: $node\n";
$time=`date`;
printf "starting time: $time";
$pwd=`pwd`;
printf "pwd: $pwd";
#^^^^^^^^^^^^^^^^^^^^^^^^^^

################# directories #############################
$data_dir="!DATA_DIR!";  #for seq.txt and init.dat

$tag="!TAG!";

#$work_dir="/tmp/!USER!/!TAG!";
$work_dir="/scratch/$ENV{USER}/$ENV{SLURM_JOBID}";
$work_dir="/tmp/$ENV{USER}" if (!-d "$work_dir" || ! "$ENV{SLURM_JOBID}");
$work_dir="$work_dir/$tag";


$bindir="!BIN_DIR!/SPcon"; ## Added

################ working directory ########################
`/bin/rm -fr $work_dir`;
`/bin/mkdir -p $work_dir`;
chdir "$work_dir";

################ make fasta sequence file #################
@seqtxts=`cat $data_dir/seq.txt`;
$sequence="";
foreach $seqtxt(@seqtxts){
    goto pos6 if($seqtxt=~/\>/);
    $seqtxt=~s/\s//mg;
    $seqtxt=~s/\n//mg;
    $sequence=$sequence.$seqtxt;
  pos6:;
}
$Lch=length $sequence;
open(seq,">protein.seq");
printf seq ">protein\n";
for($i=1;$i<=$Lch;$i++){
    $a=substr($sequence,$i-1,1);
    printf seq "$a";
    $seqQ{$i}=$a;   #only for check
    #$log{$i,$seqQ{$i}}++;
    if($i==int($i/60)*60){
	printf seq "\n";
    }
}
printf seq "\n";
close(seq);

################# copy SPcon program ###########################
print "copy and install SPcon at local .........\n";
`cp $bindir/SPcon.tar.bz2 .`; ## Edited from /nfs/amino-home/zhng/local_library/
system("tar -xjf SPcon.tar.bz2"); #generate ./bin, ./data, ./src
system("rm SPcon.tar.bz2");
`mkdir -p ./test`;
`mkdir -p ./tmp`;
`cp protein.seq test`;

############# run job #################
print "running SPcon .........\n";
chdir "$work_dir/bin";
system("./SPcon protein.seq"); 
#
#input:  ../test/protein.seq
#output: ../tmp/protein/result.txt
#
chdir "$work_dir";

############ output results -------->
$rst="$work_dir/tmp/protein/result.txt";
if(-s "$rst"){
    open(a,"$rst");
    $n=0;
    while($line=<a>){
	if($line=~/(\S+)\s+(\S+)\s+(\S+)/){
	    $n++;
	    $I{$n}=$1;
	    $J{$n}=$2;
	    $conf{$n}=$3;
	    if($conf{$n}=~/nan/){
                print "output is wrong, delete $work_dir\n";
		`rm -r $work_dir`;
		exit();
            }
 	}
    }
    close(a);
    
    @conf_keys=sort{$conf{$b}<=>$conf{$a}} keys %conf;
    open(a,">rst.dat");
    printf a "$n\n";
    for($i=1;$i<=$n;$i++){
	$k=$conf_keys[$i-1];
	printf a "%5d %5d %8.3f\n",$I{$k},$J{$k},$conf{$k};
    }
    close(a);
    
    `/bin/cp rst.dat $data_dir/spcon.dat`;
    `/bin/cp $rst $data_dir/spcon.NNB`; #for NN-BAYES
    
## convert contact into QUARK format (will do in METAPSICOVmod ------->
#$a1="$work_dir/rst.dat";
#$a2="$data_dir/seq100.com.ss";
#$a2="$data_dir/seq.dat.ss" if(!-s "$a2");
#$a3="$data_dir/exp100.dat";
#$a3="$data_dir/exp.dat" if(!-s "$a3");
#$a4="$work_dir/spcon.dat.quark";
#$bind="/nfs/amino-home/zhng/pdbinput/contact/bin";
#system("$bind/cont_quark.pl $a1 $a2 $a3 $a4");
#`cp $work_dir/spcon.dat.quark $data_dir/spcon.dat.quark`;
#^^^^^^^^^^^^ contact.quark completed ^^^^^^^^^^^^^^^^^^^

}

################# endding procedure ######################
$time=`date`;
printf "ending time: $time";
`sync`;
`sync`;
sleep(1);
`rm -r $work_dir`;
exit();
